import { useState } from "react";
import { useForm } from "react-hook-form";
import Select from "react-select";
import { useInventoryAccess } from "../../hooks/access/useInventoryAccess.js";
import { useUserSearch } from "../../hooks/searchUser/useUserSearch.js";
import Spinner from "../spinner/Spinner.js";

const AccessTab = ({
  inventoryId,
  initialIsPublic = false,
  isOwner = false,
}) => {
  const {
    accessListUsers,
    isLoading,
    handleAddAccess,
    handleDeleteAccess,
    handleTogglePublic,
    isAdding,
    isDeleting,
    isToggling,
  } = useInventoryAccess(inventoryId);

  const {
    searchTerm,
    setSearchTerm,
    resultsSearchUsers,
    isSearching,
    clearSearch,
  } = useUserSearch();
  const { watch, setValue, handleSubmit } = useForm({
    defaultValues: { selectedUser: null, isPublic: initialIsPublic },
  });

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const [sortBy, setSortBy] = useState("name");
  const sortedUsers = [...accessListUsers].sort((a, b) =>
    a.user[sortBy].localeCompare(b.user[sortBy])
  );

  const isPublic = watch("isPublic"); //–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

  //–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è Select
  const userOptions = resultsSearchUsers.map((user) => ({
    value: user.id,
    label: `${user.name} (${user.email})`,
  }));

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const onAddUser = async (data) => {
    if (data.selectedUser) {
      await handleAddAccess(data.selectedUser.value);
      setValue("selectedUser", null);
      clearSearch();
    }
  };

  const onTogglePublic = async (newIsPublic) => {
    try {
      await handleTogglePublic(newIsPublic);
      setValue("isPublic", newIsPublic);
    } catch (error) {
      setValue("isPublic", !newIsPublic);
    }
  };

  if (isLoading) return <Spinner />;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  if (!isOwner) {
    return (
      <div className="card">
        <div className="card-body text-center py-5">
          <div className="text-warning mb-3">
            <i className="bi bi-shield-lock" style={{ fontSize: "3rem" }}></i>
          </div>
          <h5 className="card-title">–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h5>
          <p className="text-muted">
            –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞.
          </p>
          <small className="text-muted">
            –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É
            –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.
          </small>
        </div>
      </div>
    );
  }

  return (
    <div className="access-tab">
      <h3 className="mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º</h3>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ */}
      <div className="card mb-4">
        <div className="card-body">
          <div className="form-check form-switch">
            <input
              type="checkbox"
              className="form-check-input"
              checked={isPublic}
              onChange={(e) => onTogglePublic(e.target.checked)}
              disabled={isToggling}
              style={{ transform: "scale(1.2)" }}
            />
            <label className="form-check-label fw-bold">
              –°–¥–µ–ª–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É–±–ª–∏—á–Ω—ã–º
            </label>
          </div>
          <small className="text-muted d-block mt-2">
            {isPublic
              ? "‚úÖ –í—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã"
              : "üîí –¢–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã"}
            {isToggling && <span className="ms-2">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>}
          </small>
        </div>
      </div>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–π) */}
      {!isPublic && (
        <div className="card mb-4">
          <div className="card-body">
            <h5 className="card-title mb-3">–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h5>
            <form onSubmit={handleSubmit(onAddUser)}>
              <div className="mb-3">
                <label className="form-label">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                <Select
                  options={userOptions}
                  onInputChange={setSearchTerm}
                  isLoading={isSearching}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ email..."
                  noOptionsMessage={() => "–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞"}
                  loadingMessage={() => "–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."}
                  isDisabled={isAdding}
                  value={watch("selectedUser")}
                  onChange={(selected) => setValue("selectedUser", selected)}
                />
              </div>
              <button
                type="submit"
                className="btn btn-success"
                disabled={isAdding || !watch("selectedUser")}
              >
                {isAdding ? (
                  <>
                    <span className="spinner-border spinner-border-sm me-2" />
                    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...
                  </>
                ) : (
                  "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø"
                )}
              </button>
            </form>
          </div>
        </div>
      )}

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º */}
      <div className="card">
        <div className="card-body">
          <div className="d-flex justify-content-between align-items-center mb-3">
            <h5 className="card-title mb-0">
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º{" "}
              {sortedUsers.length > 0 && `(${sortedUsers.length})`}
            </h5>
            {sortedUsers.length > 0 && (
              <div className="btn-group btn-group-sm">
                <button
                  onClick={() => setSortBy("name")}
                  className={`btn ${
                    sortBy === "name" ? "btn-primary" : "btn-outline-primary"
                  }`}
                >
                  –ü–æ –∏–º–µ–Ω–∏
                </button>
                <button
                  onClick={() => setSortBy("email")}
                  className={`btn ${
                    sortBy === "email" ? "btn-primary" : "btn-outline-primary"
                  }`}
                >
                  –ü–æ email
                </button>
              </div>
            )}
          </div>

          {sortedUsers.length === 0 ? (
            <p className="text-muted text-center py-3">
              –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
            </p>
          ) : (
            <div className="access-list">
              {sortedUsers.map((access) => (
                <div
                  key={access.id}
                  className="d-flex justify-content-between align-items-center py-2 border-bottom"
                >
                  <div className="user-info">
                    <strong className="d-block">{access.user.name}</strong>
                    <small className="text-muted d-block">
                      {access.user.email}
                    </small>
                    <small className="text-muted">
                      –î–æ–±–∞–≤–ª–µ–Ω:
                      {new Date(access.createdAt).toLocaleDateString("ru-RU")}
                    </small>
                  </div>
                  <button
                    onClick={() => handleDeleteAccess(access.userId)}
                    className="btn btn-outline-danger btn-sm"
                    disabled={isDeleting}
                  >
                    {isDeleting ? "..." : "–£–¥–∞–ª–∏—Ç—å"}
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AccessTab;
