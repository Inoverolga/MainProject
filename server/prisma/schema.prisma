generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  name              String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  password          String
  inventories       Inventory[]
  inventoryAccesses InventoryAccess[]

  @@map("users")
}

model Inventory {
  id                String            @id @default(cuid())
  name              String
  description       String?
  createdBy         String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isPublic          Boolean           @default(true)
  userId            String
  categoryId        String?
  category          Category?         @relation(fields: [categoryId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  inventoryAccesses InventoryAccess[]
  items             Item[]
  tags              Tag[]             @relation("InventoryToTag")

  @@map("inventories")
}

model Tag {
  id          String      @id @default(cuid())
  name        String     @unique
  isPublic    Boolean     @default(true)
  inventories Inventory[] @relation("InventoryToTag")

  items       Item[]      @relation("ItemToTag")
  @@map("tags")
}

model InventoryAccess {
  id          String    @id @default(cuid())
  userId      String
  inventoryId String
  accessLevel String    @default("WRITE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inventoryId])
  @@map("inventory_accesses")
}

model Item {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  tags    Tag[]     @relation("ItemToTag")
  @@map("items")
}

model Category {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  inventories Inventory[]

  @@map("categories")
}

