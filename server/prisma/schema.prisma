generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  name              String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  password          String
  inventories       Inventory[]
  inventoryAccesses InventoryAccess[]
  likes             Like[]
  posts             Post[]

  @@map("users")
}

model Inventory {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  createdBy         String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  isPublic          Boolean                @default(true)
  views             Int                    @default(0)
  userId            String
  categoryId        String?
  version           Int                    @default(1)
  category          Category?              @relation(fields: [categoryId], references: [id])
  user              User                   @relation(fields: [userId], references: [id])
  inventoryAccesses InventoryAccess[]
  fieldConfigs      InventoryFieldConfig[]
  items             Item[]
  posts             Post[]
  tags              Tag[]                  @relation("InventoryToTag")

  @@map("inventories")
}

model Tag {
  id          String      @id @default(cuid())
  name        String      @unique
  isPublic    Boolean     @default(true)
  inventories Inventory[] @relation("InventoryToTag")
  items       Item[]      @relation("ItemToTag")

  @@map("tags")
}

model Category {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  inventories Inventory[]

  @@map("categories")
}

model InventoryAccess {
  id          String    @id @default(cuid())
  userId      String
  inventoryId String
  accessLevel String    @default("WRITE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inventoryId])
  @@map("inventory_accesses")
}

model Item {
  id            String    @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  version       Int       @default(1)
  inventoryId   String
  customString1 String?
  customString2 String?
  customString3 String?
  customText1   String?
  customText2   String?
  customText3   String?
  customInt1    Int?
  customInt2    Int?
  customInt3    Int?
  customBool1   Boolean?
  customBool2   Boolean?
  customBool3   Boolean?
  inventory     Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  likes         Like[]
  tags          Tag[]     @relation("ItemToTag")

  @@unique([inventoryId, id])
  @@map("items")
}

model InventoryFieldConfig {
  id               String    @id @default(cuid())
  inventoryId      String
  fieldType        String
  position         Int
  name             String
  description      String?
  isVisibleInTable Boolean   @default(true)
  isRequired       Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  targetField      String
  inventory        Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@unique([inventoryId, fieldType, position])
  @@map("inventory_field_configs")
}

model Post {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([inventoryId, createdAt])
  @@map("posts")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  itemId    String
  createdAt DateTime @default(now())
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
  @@map("likes")
}
